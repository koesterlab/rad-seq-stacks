import argparse
import sys
import yaml


def main(args):
    """Take all set parameters from argparse and check if they hold.
    """
    # read in metric parsed from the output of evaluate_stacks_results.py
    with open(args.input, "r") as infile:
        # get last six lines
        last_lines = [infile.__next__() for _ in range(8)]
        for line in infile:
            last_lines.pop(0)
            last_lines.append(line)
    _, discovered, _, of_total, _, undiscovered, _, ratio = last_lines

    # aggregate all results in a dictionary, make sure the keys are equal to
    # the keywords in the expected.yaml file
    metrics = {
        "discovered": int(discovered.strip()),
        "of_total": int(of_total.strip()),
        "undiscovered": int(undiscovered.strip()),
        "ratio": float(ratio.strip()),
        }
    print(f"{metrics['discovered']}/{metrics['of_total']} missing "
          f"{metrics['undiscovered']} => {metrics['ratio']}",
          file=sys.stdout,
          )

    # load dictionary of expected values
    expected_values = yaml.load(open(args.expected, "r"))

    # prepare comparison_functions
    checks = {
        "equals": lambda x, y: x == y,
        "less": lambda x, y: x < y,
        "less_eq": lambda x, y: x <= y,
        "greater": lambda x, y: x > y,
        "greater_eq": lambda x, y: x >= y,
    }
    error_message = []
    for metric, conditions in expected_values.items():
        value = metrics[metric]  # the value parsed from the results file
        for condition, target_value in conditions.items():
            # get the function to compare the values
            if not checks[condition](value, target_value):
                error_message.append(f"Error: '{value} {condition} "
                                     f"{target_value}' does not hold.")

    if error_message:
        print("\n".join(error_message), file=sys.stdout)
        # raise ValueError


def get_argparser():
    """Manage user parameters"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        help="evaluation file generated by evaluate_stacks_results.py",
        dest="input",
    )
    parser.add_argument(
        help="yaml file with expected values",
        dest="expected",
    )
    return parser


if __name__ == '__main__':
    parser = get_argparser()
    args = parser.parse_args()
    main(args)
